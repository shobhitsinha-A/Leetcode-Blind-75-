{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .SFNS-Regular_wdth_opsz120000_GRAD_wght1F40000;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue255;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red19\green118\blue70;
\red157\green0\blue210;\red15\green112\blue1;}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c3529\c52549\c34510;
\cssrgb\c68627\c0\c85882;\cssrgb\c0\c50196\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 146\'a0LRU Cache
\f1\fs26 \cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf0 \strokec4  \cf6 \strokec6 Node\cf0 \strokec4 :\cb1 \
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 __init__\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 ,\cf8 \strokec8 key\cf0 \strokec4 ,\cf8 \strokec8 val\cf0 \strokec4 ):\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .key = key\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .val = val\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .prev,\cf5 \strokec5 self\cf0 \strokec4 .next = \cf5 \strokec5 None\cf0 \strokec4 ,\cf5 \strokec5 None\cf0 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 class\cf0 \strokec4  \cf6 \strokec6 LRUCache\cf0 \strokec4 :\cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 __init__\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 capacity\cf0 \strokec4 : \cf6 \strokec6 int\cf0 \strokec4 ):\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .caps = capacity \cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .left,\cf5 \strokec5 self\cf0 \strokec4 .right = Node(\cf9 \strokec9 0\cf0 \strokec4 ,\cf9 \strokec9 0\cf0 \strokec4 ),Node(\cf9 \strokec9 0\cf0 \strokec4 ,\cf9 \strokec9 0\cf0 \strokec4 )\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .left.next=\cf5 \strokec5 self\cf0 \strokec4 .right\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .right.prev=\cf5 \strokec5 self\cf0 \strokec4 .left \cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .cache= \{\}\cb1 \
\cb3         \cb1 \
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 remove\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 ,\cf8 \strokec8 node\cf0 \strokec4 ):\cb1 \
\cb3         preval,nxtval = node.prev,node.next\cb1 \
\cb3         preval.next,nxtval.prev = nxtval,preval\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 add\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 ,\cf8 \strokec8 node\cf0 \strokec4 ):\cb1 \
\cb3         preval,nxtval = \cf5 \strokec5 self\cf0 \strokec4 .right.prev,\cf5 \strokec5 self\cf0 \strokec4 .right \cb1 \
\cb3         preval.next = nxtval.prev = node\cb1 \
\cb3         node.prev,node.next = preval,nxtval\cb1 \
\
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 get\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 key\cf0 \strokec4 : \cf6 \strokec6 int\cf0 \strokec4 ) -> \cf6 \strokec6 int\cf0 \strokec4 :\cb1 \
\cb3         \cf10 \strokec10 if\cf0 \strokec4  key \cf5 \strokec5 in\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .cache:\cb1 \
\cb3             \cf5 \strokec5 self\cf0 \strokec4 .remove(\cf5 \strokec5 self\cf0 \strokec4 .cache[key])\cb1 \
\cb3             \cf5 \strokec5 self\cf0 \strokec4 .add(\cf5 \strokec5 self\cf0 \strokec4 .cache[key])\cb1 \
\cb3             \cf10 \strokec10 return\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .cache[key].val\cb1 \
\cb3         \cf10 \strokec10 return\cf0 \strokec4  -\cf9 \strokec9 1\cf0 \strokec4  \cb1 \
\cb3         \cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 put\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 key\cf0 \strokec4 : \cf6 \strokec6 int\cf0 \strokec4 , \cf8 \strokec8 value\cf0 \strokec4 : \cf6 \strokec6 int\cf0 \strokec4 ) -> \cf5 \strokec5 None\cf0 \strokec4 :\cb1 \
\cb3         \cf10 \strokec10 if\cf0 \strokec4  key \cf5 \strokec5 in\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .cache:\cb1 \
\cb3             \cf5 \strokec5 self\cf0 \strokec4 .remove(\cf5 \strokec5 self\cf0 \strokec4 .cache[key])\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .cache[key] = Node(key,value)\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .add(\cf5 \strokec5 self\cf0 \strokec4 .cache[key])\cb1 \
\
\cb3         \cf10 \strokec10 if\cf0 \strokec4  \cf7 \strokec7 len\cf0 \strokec4 (\cf5 \strokec5 self\cf0 \strokec4 .cache) > \cf5 \strokec5 self\cf0 \strokec4 .caps:\cb1 \
\cb3             lru = \cf5 \strokec5 self\cf0 \strokec4 .left.next\cb1 \
\cb3             \cf5 \strokec5 self\cf0 \strokec4 .remove(lru)\cb1 \
\cb3             \cf10 \strokec10 del\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .cache[lru.key]\cb1 \
\cb3         \cb1 \
\
\
\cf11 \cb3 \strokec11 # Your LRUCache object will be instantiated and called as such:\cf0 \cb1 \strokec4 \
\cf11 \cb3 \strokec11 # obj = LRUCache(capacity)\cf0 \cb1 \strokec4 \
\cf11 \cb3 \strokec11 # param_1 = obj.get(key)\cf0 \cb1 \strokec4 \
\cf11 \cb3 \strokec11 # obj.put(key,value)\cf0 \cb1 \strokec4 \
\pard\pardeftab560\slleading20\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0      \
}