{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .SFNS-Regular_wdth_opsz120000_GRAD_wght1F40000;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red0\green0\blue255;
\red12\green99\blue153;\red0\green0\blue0;\red210\green50\blue85;\red135\green135\blue135;\red85\green138\blue3;
\red135\green91\blue44;\red255\green255\blue255;\red133\green0\blue67;\red93\green108\blue125;\red32\green108\blue135;
\red101\green76\blue29;\red0\green0\blue109;\red15\green112\blue1;\red19\green118\blue70;\red157\green0\blue210;
}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c100000;
\cssrgb\c0\c46667\c66667;\cssrgb\c0\c0\c0;\cssrgb\c86667\c29020\c40784;\cssrgb\c60000\c60000\c60000;\cssrgb\c40000\c60000\c0;
\cssrgb\c60392\c43137\c22745;\cssrgb\c100000\c100000\c100000\c50196;\cssrgb\c60000\c0\c33333;\cssrgb\c43922\c50196\c56471;\cssrgb\c14902\c49804\c60000;
\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c0\c50196\c0;\cssrgb\c3529\c52549\c34510;\cssrgb\c68627\c0\c85882;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 424\'a0Longest Repeating Character Replacement
\f1\fs26 \cf4 \cb3 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb1 \strokec5 class\cf0 \strokec6  \cf7 \strokec7 Solution\cf8 \strokec8 :\cf0 \strokec6 \
    \cf5 \strokec5 def\cf0 \strokec6  \cf7 \strokec7 characterReplacement\cf8 \strokec8 (\cf0 \strokec6 self\cf8 \strokec8 ,\cf0 \strokec6  s\cf8 \strokec8 :\cf0 \strokec6  \cf9 \strokec9 str\cf8 \strokec8 ,\cf0 \strokec6  k\cf8 \strokec8 :\cf0 \strokec6  \cf9 \strokec9 int\cf8 \strokec8 )\cf0 \strokec6  \cf10 \cb11 \strokec10 ->\cf0 \cb1 \strokec6  \cf9 \strokec9 int\cf8 \strokec8 :\cf0 \strokec6 \
\
        count \cf10 \cb11 \strokec10 =\cf0 \cb1 \strokec6  \cf8 \strokec8 \{\}\cf0 \strokec6 \
        maxf\cf10 \cb11 \strokec10 =\cf12 \cb1 \strokec12 0\cf0 \strokec6 \
        res\cf10 \cb11 \strokec10 =\cf12 \cb1 \strokec12 0\cf0 \strokec6 \
        l\cf10 \cb11 \strokec10 =\cf12 \cb1 \strokec12 0\cf0 \strokec6 \
\
        \cf5 \strokec5 for\cf0 \strokec6  r \cf5 \strokec5 in\cf0 \strokec6  \cf9 \strokec9 range\cf8 \strokec8 (\cf9 \strokec9 len\cf8 \strokec8 (\cf0 \strokec6 s\cf8 \strokec8 )):\cf0 \strokec6 \
\
            \cf13 \strokec13 #poplate count \cf0 \strokec6 \
\
            count\cf8 \strokec8 [\cf0 \strokec6 s\cf8 \strokec8 [\cf0 \strokec6 r\cf8 \strokec8 ]]\cf0 \strokec6  \cf10 \cb11 \strokec10 =\cf0 \cb1 \strokec6  \cf12 \strokec12 1\cf10 \cb11 \strokec10 +\cf0 \cb1 \strokec6  count\cf8 \strokec8 .\cf0 \strokec6 get\cf8 \strokec8 (\cf0 \strokec6 s\cf8 \strokec8 [\cf0 \strokec6 r\cf8 \strokec8 ],\cf12 \strokec12 0\cf8 \strokec8 )\cf0 \strokec6 \
\
            maxf \cf10 \cb11 \strokec10 =\cf0 \cb1 \strokec6  \cf9 \strokec9 max\cf8 \strokec8 (\cf0 \strokec6 maxf\cf8 \strokec8 ,\cf0 \strokec6 count\cf8 \strokec8 [\cf0 \strokec6 s\cf8 \strokec8 [\cf0 \strokec6 r\cf8 \strokec8 ]])\cf0 \strokec6 \
\
            \cf5 \strokec5 while\cf0 \strokec6  \cf8 \strokec8 (\cf0 \strokec6 r\cf10 \cb11 \strokec10 -\cf0 \cb1 \strokec6 l\cf10 \cb11 \strokec10 +\cf12 \cb1 \strokec12 1\cf8 \strokec8 )\cf0 \strokec6  \cf10 \cb11 \strokec10 -\cf0 \cb1 \strokec6  maxf \cf10 \cb11 \strokec10 >\cf0 \cb1 \strokec6  k\cf8 \strokec8 :\cf0 \strokec6 \
\
                count\cf8 \strokec8 [\cf0 \strokec6 s\cf8 \strokec8 [\cf0 \strokec6 l\cf8 \strokec8 ]]\cf10 \cb11 \strokec10 -=\cf12 \cb1 \strokec12 1\cf0 \strokec6 \
                l\cf10 \cb11 \strokec10 +=\cf12 \cb1 \strokec12 1\cf0 \strokec6 \
\
\
\
            res \cf10 \cb11 \strokec10 =\cf0 \cb1 \strokec6  \cf9 \strokec9 max\cf8 \strokec8 (\cf0 \strokec6 res\cf8 \strokec8 ,\cf0 \strokec6 r\cf10 \cb11 \strokec10 -\cf0 \cb1 \strokec6 l\cf10 \cb11 \strokec10 +\cf12 \cb1 \strokec12 1\cf8 \strokec8 )\cf0 \strokec6 \
        \
        \cf5 \strokec5 return\cf0 \strokec6  res\
\
\
\pard\pardeftab720\partightenfactor0
\cf0 \strokec6 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 class\cf0 \strokec6  \cf14 \strokec14 Solution\cf0 \strokec6 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf4 \strokec4 def\cf0 \strokec6  \cf15 \strokec15 characterReplacement\cf0 \strokec6 (\cf16 \strokec16 self\cf0 \strokec6 , \cf16 \strokec16 s\cf0 \strokec6 : \cf14 \strokec14 str\cf0 \strokec6 , \cf16 \strokec16 k\cf0 \strokec6 : \cf14 \strokec14 int\cf0 \strokec6 ) -> \cf14 \strokec14 int\cf0 \strokec6 :\cb1 \
\
\cb3         count = \{\} \cf17 \strokec17 #count freq of aplhabets \cf0 \cb1 \strokec6 \
\cb3         res =\cf18 \strokec18 0\cf0 \cb1 \strokec6 \
\
\cb3         l=\cf18 \strokec18 0\cf0 \cb1 \strokec6 \
\
\cb3         \cf19 \strokec19 for\cf0 \strokec6  r \cf4 \strokec4 in\cf0 \strokec6  \cf15 \strokec15 range\cf0 \strokec6 (\cf15 \strokec15 len\cf0 \strokec6 (s)):\cb1 \
\
\cb3             count[s[r]] = \cf18 \strokec18 1\cf0 \strokec6 + count.get(s[r],\cf18 \strokec18 0\cf0 \strokec6 )\cb1 \
\
\cb3             \cf19 \strokec19 while\cf0 \strokec6  (r-l+\cf18 \strokec18 1\cf0 \strokec6 ) - \cf15 \strokec15 max\cf0 \strokec6 (count.values())> k:\cb1 \
\
\cb3                 count[s[l]]-=\cf18 \strokec18 1\cf0 \cb1 \strokec6 \
\
\cb3                 l+=\cf18 \strokec18 1\cf0 \strokec6  \cf17 \strokec17 # dercrease wondow size and \cf0 \cb1 \strokec6 \
\
\cb3             res = \cf15 \strokec15 max\cf0 \strokec6 (res,r-l+\cf18 \strokec18 1\cf0 \strokec6 ) \cf17 \strokec17 #res, current window \cf0 \cb1 \strokec6 \
\cb3         \cb1 \
\cb3         \cf19 \strokec19 return\cf0 \strokec6  res\cb1 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cb3         \cf17 \strokec17 # #neetcode code approach \cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # #create a hashmap count to keep count of incoming character\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # # if length of window minus max freq of element in window is greater than k then first \cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # #remove the first caharacter in the window and then increment l\cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 # count = \{\}\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # l=0\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # res=0\cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 # for r in range(len(s)):\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #     count[s[r]] = 1 + count.get(s[r],0)\cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 #     if (r-l+1) - max(count.values()) > k:\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #         count[s[l]]-=1\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #         l+=1\cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 #     res = max(res,r-l+1)\cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 # return res  \cf0 \cb1 \strokec6 \
\
\
\
\
\
\
\cb3         \cf17 \strokec17 # count = \{\}\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # res = 0\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # l = 0\cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 # for r in range(len(s)):\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #     count[s[r]] = 1 + count.get(s[r],0)\cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 #     if (r-l+1) - max(count.values()) > k:\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #         count[s[l]] -=1\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #         l+=1\cf0 \cb1 \strokec6 \
\cb3             \cb1 \
\cb3         \cf17 \strokec17 #     res = max(res, r-l+1)\cf0 \cb1 \strokec6 \
\cb3         \cb1 \
\cb3         \cf17 \strokec17 # return res\cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 #more efficient calculate maxf \cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 # count = \{\}\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # res = 0\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # l = 0\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # maxf = 0\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 # for r in range(len(s)):\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #     count[s[r]] = 1 + count.get(s[r],0)\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #     maxf = max(maxf,count[s[r]])\cf0 \cb1 \strokec6 \
\
\cb3         \cf17 \strokec17 #     if (r-l+1) - maxf > k:\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #         count[s[l]] -=1\cf0 \cb1 \strokec6 \
\cb3         \cf17 \strokec17 #         l+=1\cf0 \cb1 \strokec6 \
\cb3             \cb1 \
\cb3         \cf17 \strokec17 #     res = max(res, r-l+1)\cf0 \cb1 \strokec6 \
\cb3         \cb1 \
\cb3         \cf17 \strokec17 # return res\cf0 \cb1 \strokec6 \
}