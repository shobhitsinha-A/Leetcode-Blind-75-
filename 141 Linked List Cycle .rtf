{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 HelveticaNeue-Medium;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red255\green255\blue255;\red0\green0\blue0;
\red29\green29\blue29;\red0\green0\blue255;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;
\red157\green0\blue210;}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c14902\c14902\c14902;\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;
\cssrgb\c68627\c0\c85882;}
\margl1440\margr1440\vieww28600\viewh15240\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 # Definition for singly-linked list.\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 # class ListNode:\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #     def __init__(self, x):\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         self.val = x\cf0 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 #         self.next = None\cf0 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0

\f1\fs27 \cf5 \cb3 \strokec5 141\'a0Linked List Cycle
\f0\fs26 \cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 class\cf0 \strokec4  \cf7 \strokec7 Solution\cf0 \strokec4 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf6 \strokec6 def\cf0 \strokec4  \cf8 \strokec8 hasCycle\cf0 \strokec4 (\cf9 \strokec9 self\cf0 \strokec4 , \cf9 \strokec9 head\cf0 \strokec4 : Optional[ListNode]) -> \cf7 \strokec7 bool\cf0 \strokec4 :\cb1 \
\
\cb3         fast, slow = head, head \cb1 \
\
\cb3         \cf10 \strokec10 while\cf0 \strokec4  fast \cf6 \strokec6 and\cf0 \strokec4  fast.next:\cb1 \
\cb3             slow = slow.next \cb1 \
\cb3             fast = fast.next.next \cb1 \
\
\cb3             \cf10 \strokec10 if\cf0 \strokec4  fast == slow:\cb1 \
\cb3                 \cf10 \strokec10 return\cf0 \strokec4  \cf6 \strokec6 True\cf0 \strokec4  \cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 return\cf0 \strokec4  \cf6 \strokec6 False\cf0 \strokec4  \cb1 \
\
\cb3         HashSet = \cf7 \strokec7 set\cf0 \strokec4 ()\cb1 \
\
\cb3         \cf10 \strokec10 while\cf0 \strokec4  head:\cb1 \
\cb3             \cf10 \strokec10 if\cf0 \strokec4  head \cf6 \strokec6 in\cf0 \strokec4  HashSet:\cb1 \
\cb3                 \cf10 \strokec10 return\cf0 \strokec4  \cf6 \strokec6 True\cf0 \strokec4  \cb1 \
\cb3             \cb1 \
\cb3             HashSet.add(head)\cb1 \
\cb3             head = head.next \cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 return\cf0 \strokec4  \cf6 \strokec6 False\cf0 \cb1 \strokec4 \
\
}