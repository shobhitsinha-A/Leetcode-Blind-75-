{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red0\green0\blue255;
\red0\green0\blue0;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red157\green0\blue210;
\red15\green112\blue1;\red19\green118\blue70;}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c100000;
\cssrgb\c0\c0\c0;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c68627\c0\c85882;
\cssrgb\c0\c50196\c0;\cssrgb\c3529\c52549\c34510;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs27 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 15\'a03Sum
\f1\fs26 \cf4 \cb3 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 class\cf0 \strokec5  \cf6 \strokec6 Solution\cf0 \strokec5 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf4 \strokec4 def\cf0 \strokec5  \cf7 \strokec7 threeSum\cf0 \strokec5 (\cf8 \strokec8 self\cf0 \strokec5 , \cf8 \strokec8 nums\cf0 \strokec5 : List[\cf6 \strokec6 int\cf0 \strokec5 ]) -> List[List[\cf6 \strokec6 int\cf0 \strokec5 ]]:\cb1 \
\cb3         nums.sort()\cb1 \
\cb3         ans = []\cb1 \
\cb3         \cb1 \
\cb3         \cf9 \strokec9 for\cf0 \strokec5  i,n \cf4 \strokec4 in\cf0 \strokec5  \cf7 \strokec7 enumerate\cf0 \strokec5 (nums):\cb1 \
\cb3             \cf10 \strokec10 #what if initially only we have same number \cf0 \cb1 \strokec5 \
\cb3             \cf10 \strokec10 #[-1,-1,0,1,2]\cf0 \cb1 \strokec5 \
\cb3             \cf9 \strokec9 if\cf0 \strokec5  i>\cf11 \strokec11 0\cf0 \strokec5  \cf4 \strokec4 and\cf0 \strokec5  n == nums[i-\cf11 \strokec11 1\cf0 \strokec5 ]:\cb1 \
\cb3                 \cf9 \strokec9 continue\cf0 \strokec5  \cb1 \
\cb3             \cb1 \
\cb3             l,r = i+\cf11 \strokec11 1\cf0 \strokec5 , \cf7 \strokec7 len\cf0 \strokec5 (nums)-\cf11 \strokec11 1\cf0 \cb1 \strokec5 \
\
\cb3             \cf9 \strokec9 while\cf0 \strokec5  l < r:\cb1 \
\cb3                 threeSum = n + nums[l] + nums[r]\cb1 \
\cb3                 \cf9 \strokec9 if\cf0 \strokec5  threeSum < \cf11 \strokec11 0\cf0 \strokec5 :\cb1 \
\cb3                     l+=\cf11 \strokec11 1\cf0 \cb1 \strokec5 \
\cb3                 \cf9 \strokec9 elif\cf0 \strokec5  threeSum > \cf11 \strokec11 0\cf0 \strokec5 :\cb1 \
\cb3                     r-=\cf11 \strokec11 1\cf0 \cb1 \strokec5 \
\cb3                 \cf9 \strokec9 else\cf0 \strokec5 :\cb1 \
\cb3                     ans.append([n,nums[l],nums[r]])\cb1 \
\cb3                     l+=\cf11 \strokec11 1\cf0 \cb1 \strokec5 \
\cb3                     \cf10 \strokec10 #but what if now next l also same \cf0 \cb1 \strokec5 \
\cb3                     \cf10 \strokec10 # [-2,-2,0,0,2,2]\cf0 \cb1 \strokec5 \
\cb3                     \cf9 \strokec9 while\cf0 \strokec5  nums[l] == nums[l-\cf11 \strokec11 1\cf0 \strokec5 ] \cf4 \strokec4 and\cf0 \strokec5  l < r:\cb1 \
\cb3                         l+=\cf11 \strokec11 1\cf0 \cb1 \strokec5 \
\cb3             \cb1 \
\cb3         \cf9 \strokec9 return\cf0 \strokec5  ans\cb1 \
\
}