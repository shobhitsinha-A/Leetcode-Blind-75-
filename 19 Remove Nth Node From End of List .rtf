{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red15\green112\blue1;
\red0\green0\blue0;\red0\green0\blue255;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;
\red19\green118\blue70;\red157\green0\blue210;}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c50196\c0;
\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;
\cssrgb\c3529\c52549\c34510;\cssrgb\c68627\c0\c85882;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs27 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 19\'a0Remove Nth Node From End of List
\f1\fs26 \cf4 \cb3 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 # Definition for singly-linked list.\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4 # class ListNode:\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4 #     def __init__(self, val=0, next=None):\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4 #         self.val = val\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4 #         self.next = next\cf0 \cb1 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 class\cf0 \strokec5  \cf7 \strokec7 Solution\cf0 \strokec5 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf6 \strokec6 def\cf0 \strokec5  \cf8 \strokec8 removeNthFromEnd\cf0 \strokec5 (\cf9 \strokec9 self\cf0 \strokec5 , \cf9 \strokec9 head\cf0 \strokec5 : Optional[ListNode], \cf9 \strokec9 n\cf0 \strokec5 : \cf7 \strokec7 int\cf0 \strokec5 ) -> Optional[ListNode]:\cb1 \
\
\cb3         dummy = ListNode(\cf10 \strokec10 0\cf0 \strokec5 ,head)\cb1 \
\cb3         left = dummy \cb1 \
\cb3         right = head\cb1 \
\
\cb3         \cf11 \strokec11 while\cf0 \strokec5  n>\cf10 \strokec10 0\cf0 \strokec5  \cf6 \strokec6 and\cf0 \strokec5  right:\cb1 \
\cb3             right = right.next \cb1 \
\cb3             n-=\cf10 \strokec10 1\cf0 \cb1 \strokec5 \
\cb3         \cb1 \
\cb3         \cf11 \strokec11 while\cf0 \strokec5  right:\cb1 \
\cb3             left = left.next\cb1 \
\cb3             right = right.next\cb1 \
\cb3         \cb1 \
\cb3         left.next = left.next.next\cb1 \
\
\cb3         \cf11 \strokec11 return\cf0 \strokec5  dummy.next \cb1 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cb3         \cf4 \strokec4 # #find length \cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 # length = 0\cf0 \cb1 \strokec5 \
\
\cb3         \cf4 \strokec4 # tmp = head\cf0 \cb1 \strokec5 \
\
\cb3         \cf4 \strokec4 # while tmp:\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     length+=1\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     tmp=tmp.next \cf0 \cb1 \strokec5 \
\cb3         \cb1 \
\cb3         \cf4 \strokec4 # #edge cases\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 # if length == 1:\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     return None\cf0 \cb1 \strokec5 \
\cb3         \cb1 \
\cb3         \cf4 \strokec4 # if (length-n)==0:\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     return head.next\cf0 \cb1 \strokec5 \
\
\cb3         \cf4 \strokec4 # #go to element before that position and change the link \cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 # newhead = head \cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 # count = 1\cf0 \cb1 \strokec5 \
\
\cb3         \cf4 \strokec4 # while count!=(length-n):\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     count+=1\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     newhead = newhead.next\cf0 \cb1 \strokec5 \
\cb3         \cb1 \
\cb3         \cf4 \strokec4 # newhead.next = newhead.next.next \cf0 \cb1 \strokec5 \
\
\cb3         \cf4 \strokec4 # return head \cf0 \cb1 \strokec5 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\cb3         \cb1 \
\cb3         \cf4 \strokec4 # dummy = ListNode(0,head)\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 # left = dummy\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 # right = head\cf0 \cb1 \strokec5 \
\
\cb3         \cf4 \strokec4 # while n > 0 and right:\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     right = right.next \cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     n -=1\cf0 \cb1 \strokec5 \
\cb3         \cb1 \
\cb3         \cf4 \strokec4 # while right:\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     left=left.next\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 #     right=right.next\cf0 \cb1 \strokec5 \
\cb3         \cb1 \
\cb3         \cf4 \strokec4 # left.next= left.next.next\cf0 \cb1 \strokec5 \
\
\cb3         \cf4 \strokec4 # return dummy.next \cf0 \cb1 \strokec5 \
}