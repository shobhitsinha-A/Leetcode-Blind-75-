{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red0\green0\blue0;
\red15\green112\blue1;\red0\green0\blue255;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;
\red157\green0\blue210;\red19\green118\blue70;}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c50196\c0;\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;
\cssrgb\c68627\c0\c85882;\cssrgb\c3529\c52549\c34510;}
\margl1440\margr1440\vieww28600\viewh15260\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs27 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 23\'a0Merge k Sorted Lists
\f1\fs26 \cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Definition for singly-linked list.\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 # class ListNode:\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 #     def __init__(self, val=0, next=None):\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 #         self.val = val\cf0 \cb1 \strokec4 \
\cf5 \cb3 \strokec5 #         self.next = next\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 class\cf0 \strokec4  \cf7 \strokec7 Solution\cf0 \strokec4 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf6 \strokec6 def\cf0 \strokec4  \cf8 \strokec8 mergeKLists\cf0 \strokec4 (\cf9 \strokec9 self\cf0 \strokec4 , \cf9 \strokec9 lists\cf0 \strokec4 : List[Optional[ListNode]]) -> Optional[ListNode]:\cb1 \
\
\cb3         \cf10 \strokec10 if\cf0 \strokec4  \cf8 \strokec8 len\cf0 \strokec4 (lists) == \cf11 \strokec11 0\cf0 \strokec4  \cf6 \strokec6 or\cf0 \strokec4  \cf6 \strokec6 not\cf0 \strokec4  lists:\cb1 \
\cb3             \cf10 \strokec10 return\cf0 \strokec4  \cf6 \strokec6 None\cf0 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 while\cf0 \strokec4  \cf8 \strokec8 len\cf0 \strokec4 (lists)>\cf11 \strokec11 1\cf0 \strokec4 :\cb1 \
\cb3             mergedlists=[]\cb1 \
\
\cb3             \cf10 \strokec10 for\cf0 \strokec4  i \cf6 \strokec6 in\cf0 \strokec4  \cf8 \strokec8 range\cf0 \strokec4 (\cf11 \strokec11 0\cf0 \strokec4 ,\cf8 \strokec8 len\cf0 \strokec4 (lists),\cf11 \strokec11 2\cf0 \strokec4 ):\cb1 \
\cb3                 l1 = lists[i]\cb1 \
\cb3                 l2 = lists[i+\cf11 \strokec11 1\cf0 \strokec4 ] \cf10 \strokec10 if\cf0 \strokec4  (i+\cf11 \strokec11 1\cf0 \strokec4 ) < \cf8 \strokec8 len\cf0 \strokec4 (lists) \cf10 \strokec10 else\cf0 \strokec4  \cf6 \strokec6 None\cf0 \cb1 \strokec4 \
\cb3                 mergedlists.append(\cf6 \strokec6 self\cf0 \strokec4 .mergelist(l1,l2))\cb1 \
\cb3             lists = mergedlists\cb1 \
\cb3         \cf10 \strokec10 return\cf0 \strokec4  lists[\cf11 \strokec11 0\cf0 \strokec4 ]\cb1 \
\cb3     \cf6 \strokec6 def\cf0 \strokec4  \cf8 \strokec8 mergelist\cf0 \strokec4 (\cf9 \strokec9 self\cf0 \strokec4 ,\cf9 \strokec9 l1\cf0 \strokec4 ,\cf9 \strokec9 l2\cf0 \strokec4 ):\cb1 \
\cb3         dummy = ListNode()\cb1 \
\cb3         head = dummy\cb1 \
\cb3         \cf10 \strokec10 while\cf0 \strokec4  l1 \cf6 \strokec6 and\cf0 \strokec4  l2:\cb1 \
\cb3             \cf10 \strokec10 if\cf0 \strokec4  l1.val < l2.val:\cb1 \
\cb3                 head.next = l1\cb1 \
\cb3                 l1 = l1.next\cb1 \
\cb3             \cf10 \strokec10 else\cf0 \strokec4 :\cb1 \
\cb3                 head.next = l2\cb1 \
\cb3                 l2 = l2.next\cb1 \
\cb3             head = head.next\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 if\cf0 \strokec4  l1:\cb1 \
\cb3             head.next = l1\cb1 \
\cb3          \cb1 \
\cb3         \cf10 \strokec10 if\cf0 \strokec4  l2:\cb1 \
\cb3             head.next = l2\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 return\cf0 \strokec4  dummy.next \cb1 \
\cb3         \cb1 \
}