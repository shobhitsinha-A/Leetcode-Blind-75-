{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 .SFNS-Regular_wdth_opsz140000_GRAD_wght1F40000;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red29\green29\blue29;\red255\green255\blue255;
\red0\green0\blue255;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red19\green118\blue70;
\red157\green0\blue210;\red15\green112\blue1;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;
\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c3529\c52549\c34510;
\cssrgb\c68627\c0\c85882;\cssrgb\c0\c50196\c0;}
\margl1440\margr1440\vieww28600\viewh15180\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs26 \cf0 #HINT visualize on number line then see chats common \
#you will see every seq has start start does not have left neighbor \
#then check if set has n+length \
#if not check if longest updated or not \
\pard\pardeftab720\partightenfactor0

\f1\fs40 \cf3 \cb4 \expnd0\expndtw0\kerning0
128\'a0Longest Consecutive Sequence
\f0\fs26 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0

\f2 \cf5 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 class\cf0 \strokec2  \cf6 \strokec6 Solution\cf0 \strokec2 :\cb1 \
\cb4     \cf5 \strokec5 def\cf0 \strokec2  \cf7 \strokec7 longestConsecutive\cf0 \strokec2 (\cf8 \strokec8 self\cf0 \strokec2 , \cf8 \strokec8 nums\cf0 \strokec2 : List[\cf6 \strokec6 int\cf0 \strokec2 ]) -> \cf6 \strokec6 int\cf0 \strokec2 :\cb1 \
\
\cb4         num_set= \cf6 \strokec6 set\cf0 \strokec2 (nums)\cb1 \
\cb4         longest = \cf9 \strokec9 0\cf0 \cb1 \strokec2 \
\
\cb4         \cf10 \strokec10 for\cf0 \strokec2  n \cf5 \strokec5 in\cf0 \strokec2  num_set:\cb1 \
\cb4             \cf10 \strokec10 if\cf0 \strokec2  (n-\cf9 \strokec9 1\cf0 \strokec2 ) \cf5 \strokec5 not\cf0 \strokec2  \cf5 \strokec5 in\cf0 \strokec2  num_set:\cb1 \
\cb4                 length = \cf9 \strokec9 0\cf0 \strokec2  \cb1 \
\cb4                 \cf10 \strokec10 while\cf0 \strokec2  (n+length) \cf5 \strokec5 in\cf0 \strokec2  num_set:\cb1 \
\cb4                     length+=\cf9 \strokec9 1\cf0 \cb1 \strokec2 \
\cb4                 longest=\cf7 \strokec7 max\cf0 \strokec2 (length,longest)       \cb1 \
\cb4         \cb1 \
\cb4         \cf10 \strokec10 return\cf0 \strokec2  longest \cb1 \
\
\cb4          \cf11 \strokec11 # if not nums:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     return 0 \cf0 \cb1 \strokec2 \
\cb4         \cb1 \
\cb4         \cf11 \strokec11 # nums = set(nums)\cf0 \cb1 \strokec2 \
\
\cb4         \cf11 \strokec11 # longest,current = 1,1\cf0 \cb1 \strokec2 \
\
\cb4         \cf11 \strokec11 # for n in nums:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     if n-1 not in nums:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         currentnum = n\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         current = 1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         while currentnum+1 in nums:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #             currentnum+=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #             current+=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         longest = max(current,longest)\cf0 \cb1 \strokec2 \
\cb4         \cb1 \
\cb4         \cf11 \strokec11 # return longest\cf0 \cb1 \strokec2 \
\cb4         \cb1 \
\
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4       \cb1 \
\cb4         \cf11 \strokec11 # #Neetcode\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # setNum = set(nums)\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # longest = 0\cf0 \cb1 \strokec2 \
\
\cb4         \cf11 \strokec11 # for n in nums:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     if n-1 not in setNum:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         length =0\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         while n+length in setNum:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #             length+=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         longest = max(length,longest)\cf0 \cb1 \strokec2 \
\cb4         \cb1 \
\cb4         \cf11 \strokec11 # return longest\cf0 \cb1 \strokec2 \
\cb4         \cb1 \
\cb4         \cf11 \strokec11 #tc: nlogn\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # nums=list(set(nums))\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # nums.sort()\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # print(nums)\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # cseq=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # lonseq=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # if len(nums)==0:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     return 0\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # for i in range(len(nums)-1):\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     if nums[i+1]==nums[i]+1:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         cseq+=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         if cseq>lonseq:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #             lonseq=cseq\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     else:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         cseq=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # return lonseq\cf0 \cb1 \strokec2 \
\cb4         \cb1 \
\
\cb4         \cf11 \strokec11 # first attemp: thinking heap TLE 70/72\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # nums=list(set(nums))\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # heapq.heapify(nums)\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # longestSeq=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # curseq=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # if len(nums)==0:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     return 0\cf0 \cb1 \strokec2 \
\cb4         \cb1 \
\cb4         \cf11 \strokec11 # while len(nums)>0:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     poped = heapq.heappop(nums)\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     # if poped in nums:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     #     poped = heapq.heappop(nums)\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     if (poped+1) in nums:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         curseq+=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         if curseq>longestSeq:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #            longestSeq=curseq \cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #     else:\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 #         curseq=1\cf0 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 # return longestSeq\cf0 \cb1 \strokec2 \
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}