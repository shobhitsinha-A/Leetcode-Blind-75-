{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .SFNS-Regular_wdth_opsz140000_GRAD_wght1F40000;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red12\green99\blue153;
\red0\green0\blue0;\red210\green50\blue85;\red135\green135\blue135;\red85\green138\blue3;\red135\green91\blue44;
\red255\green255\blue255;\red133\green0\blue67;\red93\green108\blue125;}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c46667\c66667;
\cssrgb\c0\c0\c0;\cssrgb\c86667\c29020\c40784;\cssrgb\c60000\c60000\c60000;\cssrgb\c40000\c60000\c0;\cssrgb\c60392\c43137\c22745;
\cssrgb\c100000\c100000\c100000\c50196;\cssrgb\c60000\c0\c33333;\cssrgb\c43922\c50196\c56471;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 739\'a0Daily Temperatures
\f1\fs26 \cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 class\cf0 \strokec5  \cf6 \strokec6 Solution\cf7 \strokec7 :\cf0 \strokec5 \
    \cf4 \strokec4 def\cf0 \strokec5  \cf6 \strokec6 dailyTemperatures\cf7 \strokec7 (\cf0 \strokec5 self\cf7 \strokec7 ,\cf0 \strokec5  temperatures\cf7 \strokec7 :\cf0 \strokec5  List\cf7 \strokec7 [\cf8 \strokec8 int\cf7 \strokec7 ])\cf0 \strokec5  \cf9 \cb10 \strokec9 ->\cf0 \cb1 \strokec5  List\cf7 \strokec7 [\cf8 \strokec8 int\cf7 \strokec7 ]:\cf0 \strokec5 \
        res \cf9 \cb10 \strokec9 =\cf0 \cb1 \strokec5  \cf7 \strokec7 [\cf11 \strokec11 0\cf7 \strokec7 ]\cf0 \strokec5  \cf9 \cb10 \strokec9 *\cf0 \cb1 \strokec5  \cf8 \strokec8 len\cf7 \strokec7 (\cf0 \strokec5 temperatures\cf7 \strokec7 )\cf0 \strokec5 \
        stack \cf9 \cb10 \strokec9 =\cf0 \cb1 \strokec5  \cf7 \strokec7 []\cf0 \strokec5  \cf12 \strokec12 #pair: [temp,index]\cf0 \strokec5 \
\
        \cf4 \strokec4 for\cf0 \strokec5  i\cf7 \strokec7 ,\cf0 \strokec5 t \cf4 \strokec4 in\cf0 \strokec5  \cf8 \strokec8 enumerate\cf7 \strokec7 (\cf0 \strokec5 temperatures\cf7 \strokec7 ):\cf0 \strokec5 \
            \cf4 \strokec4 while\cf0 \strokec5  stack \cf4 \strokec4 and\cf0 \strokec5  t \cf9 \cb10 \strokec9 >\cf0 \cb1 \strokec5  stack\cf7 \strokec7 [\cf9 \cb10 \strokec9 -\cf11 \cb1 \strokec11 1\cf7 \strokec7 ][\cf11 \strokec11 0\cf7 \strokec7 ]:\cf0 \strokec5 \
                stackTemp\cf7 \strokec7 ,\cf0 \strokec5 stackInd \cf9 \cb10 \strokec9 =\cf0 \cb1 \strokec5  stack\cf7 \strokec7 .\cf0 \strokec5 pop\cf7 \strokec7 ()\cf0 \strokec5 \
                res\cf7 \strokec7 [\cf0 \strokec5 stackInd\cf7 \strokec7 ]\cf0 \strokec5  \cf9 \cb10 \strokec9 =\cf0 \cb1 \strokec5  \cf7 \strokec7 (\cf0 \strokec5 i\cf9 \cb10 \strokec9 -\cf0 \cb1 \strokec5 stackInd\cf7 \strokec7 )\cf0 \strokec5 \
            stack\cf7 \strokec7 .\cf0 \strokec5 append\cf7 \strokec7 ([\cf0 \strokec5 t\cf7 \strokec7 ,\cf0 \strokec5 i\cf7 \strokec7 ])\cf0 \strokec5 \
        \
        \cf4 \strokec4 return\cf0 \strokec5  res\
\
        \cf12 \strokec12 #GOOD EFFORT BOIII\cf0 \strokec5 \
        \cf12 \strokec12 # cmpStack = []\cf0 \strokec5 \
        \cf12 \strokec12 # res=[]\cf0 \strokec5 \
\
        \cf12 \strokec12 # #for 1st element \cf0 \strokec5 \
        \cf12 \strokec12 # cmpStack.append(temperatures.pop())\cf0 \strokec5 \
        \cf12 \strokec12 # res.append(0)\cf0 \strokec5 \
\
        \cf12 \strokec12 # while temperatures:\cf0 \strokec5 \
        \cf12 \strokec12 #     if temperatures[-1]<cmpStack[-1]:\cf0 \strokec5 \
        \cf12 \strokec12 #         res.append(1)\cf0 \strokec5 \
        \cf12 \strokec12 #         #print("Normal res update",res)\cf0 \strokec5 \
        \cf12 \strokec12 #         cmpStack.append(temperatures.pop())\cf0 \strokec5 \
        \cf12 \strokec12 #     else:\cf0 \strokec5 \
        \cf12 \strokec12 #         elementFound=False\cf0 \strokec5 \
        \cf12 \strokec12 #         for i in range(len(cmpStack)-1,-1,-1):\cf0 \strokec5 \
        \cf12 \strokec12 #             if temperatures[-1] < cmpStack[i]:\cf0 \strokec5 \
        \cf12 \strokec12 #                 res.append(len(cmpStack)-i)\cf0 \strokec5 \
        \cf12 \strokec12 #                 cmpStack.append(temperatures.pop())\cf0 \strokec5 \
        \cf12 \strokec12 #                 elementFound=True\cf0 \strokec5 \
        \cf12 \strokec12 #                 break\cf0 \strokec5 \
        \cf12 \strokec12 #                 if not temperatures:\cf0 \strokec5 \
        \cf12 \strokec12 #                     break\cf0 \strokec5 \
        \cf12 \strokec12 #             else:\cf0 \strokec5 \
        \cf12 \strokec12 #                 pass\cf0 \strokec5 \
                \
        \cf12 \strokec12 #         if not elementFound:\cf0 \strokec5 \
        \cf12 \strokec12 #             res.append(0)\cf0 \strokec5 \
        \cf12 \strokec12 #             #print("ELEMENT NOT FOUND")\cf0 \strokec5 \
        \cf12 \strokec12 #             #print("element not found res update:",res)\cf0 \strokec5 \
        \cf12 \strokec12 #             cmpStack.append(temperatures.pop())\cf0 \strokec5 \
        \cf12 \strokec12 #             elementFound=False \cf0 \strokec5 \
        \cf12 \strokec12 # #print("FINAL RES PRINT",res)\cf0 \strokec5 \
        \cf12 \strokec12 # res.reverse()\cf0 \strokec5 \
        \cf12 \strokec12 # #print("FINAL ANS",res)\cf0 \strokec5 \
        \cf12 \strokec12 # return res\cf0 \strokec5 \
         \
\pard\pardeftab560\slleading20\partightenfactor0

\f2 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}