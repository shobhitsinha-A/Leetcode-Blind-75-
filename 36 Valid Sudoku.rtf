{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red0\green0\blue255;
\red0\green0\blue0;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red157\green0\blue210;
\red19\green118\blue70;\red144\green1\blue18;\red15\green112\blue1;}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c100000;
\cssrgb\c0\c0\c0;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c68627\c0\c85882;
\cssrgb\c3529\c52549\c34510;\cssrgb\c63922\c8235\c8235;\cssrgb\c0\c50196\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 36\'a0Valid Sudoku
\f1\fs26 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 class\cf0 \strokec5  \cf6 \strokec6 Solution\cf0 \strokec5 :\cb1 \
\cb3     \cf4 \strokec4 def\cf0 \strokec5  \cf7 \strokec7 isValidSudoku\cf0 \strokec5 (\cf8 \strokec8 self\cf0 \strokec5 , \cf8 \strokec8 board\cf0 \strokec5 : List[List[\cf6 \strokec6 str\cf0 \strokec5 ]]) -> \cf6 \strokec6 bool\cf0 \strokec5 :\cb1 \
\cb3         row = collections.defaultdict(\cf6 \strokec6 set\cf0 \strokec5 )\cb1 \
\cb3         col = collections.defaultdict(\cf6 \strokec6 set\cf0 \strokec5 )\cb1 \
\cb3         square = collections.defaultdict(\cf6 \strokec6 set\cf0 \strokec5 )\cb1 \
\cb3         \cf7 \strokec7 print\cf0 \strokec5 (row)\cb1 \
\
\cb3         \cf9 \strokec9 for\cf0 \strokec5  r \cf4 \strokec4 in\cf0 \strokec5  \cf7 \strokec7 range\cf0 \strokec5 (\cf10 \strokec10 9\cf0 \strokec5 ):\cb1 \
\cb3             \cf9 \strokec9 for\cf0 \strokec5  c \cf4 \strokec4 in\cf0 \strokec5  \cf7 \strokec7 range\cf0 \strokec5 (\cf10 \strokec10 9\cf0 \strokec5 ):\cb1 \
\cb3                 \cf9 \strokec9 if\cf0 \strokec5  board[r][c] == \cf11 \strokec11 '.'\cf0 \strokec5 :\cb1 \
\cb3                     \cf9 \strokec9 continue\cf0 \cb1 \strokec5 \
\cb3                 \cf12 \strokec12 #check if number exists in row, or col, or square if yes return false           \cf0 \cb1 \strokec5 \
\cb3                 \cf9 \strokec9 if\cf0 \strokec5  (board[r][c] \cf4 \strokec4 in\cf0 \strokec5  row[r] \cf4 \strokec4 or\cf0 \strokec5  board[r][c] \cf4 \strokec4 in\cf0 \strokec5  col[c] \cf4 \strokec4 or\cf0 \strokec5  board[r][c] \cf4 \strokec4 in\cf0 \strokec5  square[(r//\cf10 \strokec10 3\cf0 \strokec5 ,c//\cf10 \strokec10 3\cf0 \strokec5 )]):\cb1 \
\cb3                     \cf9 \strokec9 return\cf0 \strokec5  \cf4 \strokec4 False\cf0 \strokec5  \cb1 \
\cb3                 \cf12 \strokec12 #else -> add number go to next number \cf0 \cb1 \strokec5 \
\cb3                 row[r].add(board[r][c])\cb1 \
\cb3                 col[c].add(board[r][c])\cb1 \
\cb3                 square[(r//\cf10 \strokec10 3\cf0 \strokec5 ,c//\cf10 \strokec10 3\cf0 \strokec5 )].add(board[r][c])\cb1 \
\
\cb3         \cf12 \strokec12 #if all conditions satisfy valid board \cf0 \cb1 \strokec5 \
\cb3         \cf9 \strokec9 return\cf0 \strokec5  \cf4 \strokec4 True\cf0 \strokec5  \cb1 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}