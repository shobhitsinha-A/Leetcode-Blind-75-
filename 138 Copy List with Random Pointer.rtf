{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red144\green1\blue18;
\red0\green0\blue0;\red0\green0\blue255;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;
\red157\green0\blue210;}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c63922\c8235\c8235;
\cssrgb\c0\c0\c0;\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;
\cssrgb\c68627\c0\c85882;}
\margl1440\margr1440\vieww28600\viewh15260\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs27 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 138\'a0Copy List with Random Pointer\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf4 \cb3 \strokec4 """\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4 # Definition for a Node.\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4 class Node:\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4     def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4         self.val = int(x)\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4         self.next = next\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4         self.random = random\cf0 \cb1 \strokec5 \
\cf4 \cb3 \strokec4 """\cf0 \cb1 \strokec5 \
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 class\cf0 \strokec5  \cf7 \strokec7 Solution\cf0 \strokec5 :\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf6 \strokec6 def\cf0 \strokec5  \cf8 \strokec8 copyRandomList\cf0 \strokec5 (\cf9 \strokec9 self\cf0 \strokec5 , \cf9 \strokec9 head\cf0 \strokec5 : \cf4 \strokec4 'Optional[Node]'\cf0 \strokec5 ) -> \cf4 \strokec4 'Optional[Node]'\cf0 \strokec5 :\cb1 \
\
\cb3         hashmap = \{\cf6 \strokec6 None\cf0 \strokec5 :\cf6 \strokec6 None\cf0 \strokec5 \}\cb1 \
\
\cb3         curr = head\cb1 \
\
\cb3         \cf10 \strokec10 while\cf0 \strokec5  curr:\cb1 \
\cb3             copyNode = Node(curr.val)\cb1 \
\cb3             hashmap[curr] = copyNode\cb1 \
\cb3             curr = curr.next \cb1 \
\
\cb3         curr = head\cb1 \
\
\cb3         \cf10 \strokec10 while\cf0 \strokec5  curr:\cb1 \
\cb3             copyNode = hashmap[curr]\cb1 \
\cb3             copyNode.next = hashmap[curr.next]\cb1 \
\cb3             copyNode.random = hashmap[curr.random]\cb1 \
\cb3             curr=curr.next\cb1 \
\
\cb3         \cf10 \strokec10 return\cf0 \strokec5  hashmap[head] \cb1 \
\
}