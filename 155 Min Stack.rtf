{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red29\green29\blue29;\red255\green255\blue255;\red0\green0\blue255;
\red0\green0\blue0;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red19\green118\blue70;
\red157\green0\blue210;\red15\green112\blue1;}
{\*\expandedcolortbl;;\cssrgb\c14902\c14902\c14902;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c100000;
\cssrgb\c0\c0\c0;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c3529\c52549\c34510;
\cssrgb\c68627\c0\c85882;\cssrgb\c0\c50196\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 155\'a0Min Stack
\f1\fs26 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f2 \cf4 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 class\cf0 \strokec5  \cf6 \strokec6 MinStack\cf0 \strokec5 :\cb1 \
\
\cb3     \cf4 \strokec4 def\cf0 \strokec5  \cf7 \strokec7 __init__\cf0 \strokec5 (\cf8 \strokec8 self\cf0 \strokec5 ):\cb1 \
\cb3         \cf4 \strokec4 self\cf0 \strokec5 .stack = []\cb1 \
\cb3         \cf4 \strokec4 self\cf0 \strokec5 .minStack = []\cb1 \
\cb3         \cb1 \
\
\cb3     \cf4 \strokec4 def\cf0 \strokec5  \cf7 \strokec7 push\cf0 \strokec5 (\cf8 \strokec8 self\cf0 \strokec5 , \cf8 \strokec8 val\cf0 \strokec5 : \cf6 \strokec6 int\cf0 \strokec5 ) -> \cf4 \strokec4 None\cf0 \strokec5 :\cb1 \
\cb3         \cf4 \strokec4 self\cf0 \strokec5 .stack.append(val)\cb1 \
\cb3         val = \cf7 \strokec7 min\cf0 \strokec5 (val,\cf4 \strokec4 self\cf0 \strokec5 .minStack[-\cf9 \strokec9 1\cf0 \strokec5 ] \cf10 \strokec10 if\cf0 \strokec5  \cf4 \strokec4 self\cf0 \strokec5 .minStack \cf10 \strokec10 else\cf0 \strokec5  val)\cb1 \
\cb3         \cf4 \strokec4 self\cf0 \strokec5 .minStack.append(val)\cb1 \
\
\cb3     \cf4 \strokec4 def\cf0 \strokec5  \cf7 \strokec7 pop\cf0 \strokec5 (\cf8 \strokec8 self\cf0 \strokec5 ) -> \cf4 \strokec4 None\cf0 \strokec5 :\cb1 \
\cb3         \cf4 \strokec4 self\cf0 \strokec5 .stack.pop()\cb1 \
\cb3         \cf11 \strokec11 #print(self.stack)\cf0 \cb1 \strokec5 \
\cb3         \cf4 \strokec4 self\cf0 \strokec5 .minStack.pop()\cb1 \
\cb3         \cf11 \strokec11 #print(self.minStack)\cf0 \cb1 \strokec5 \
\
\cb3     \cf4 \strokec4 def\cf0 \strokec5  \cf7 \strokec7 top\cf0 \strokec5 (\cf8 \strokec8 self\cf0 \strokec5 ) -> \cf6 \strokec6 int\cf0 \strokec5 :\cb1 \
\cb3         \cf10 \strokec10 return\cf0 \strokec5  \cf4 \strokec4 self\cf0 \strokec5 .stack[-\cf9 \strokec9 1\cf0 \strokec5 ]\cb1 \
\
\cb3     \cf4 \strokec4 def\cf0 \strokec5  \cf7 \strokec7 getMin\cf0 \strokec5 (\cf8 \strokec8 self\cf0 \strokec5 ) -> \cf6 \strokec6 int\cf0 \strokec5 :\cb1 \
\cb3         \cf10 \strokec10 return\cf0 \strokec5  \cf4 \strokec4 self\cf0 \strokec5 .minStack[-\cf9 \strokec9 1\cf0 \strokec5 ]\cb1 \
\cb3         \cb1 \
\
\
\cf11 \cb3 \strokec11 # Your MinStack object will be instantiated and called as such:\cf0 \cb1 \strokec5 \
\cf11 \cb3 \strokec11 # obj = MinStack()\cf0 \cb1 \strokec5 \
\cf11 \cb3 \strokec11 # obj.push(val)\cf0 \cb1 \strokec5 \
\cf11 \cb3 \strokec11 # obj.pop()\cf0 \cb1 \strokec5 \
\cf11 \cb3 \strokec11 # param_3 = obj.top()\cf0 \cb1 \strokec5 \
\cf11 \cb3 \strokec11 # param_4 = obj.getMin()\cf0 \cb1 \strokec5 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}